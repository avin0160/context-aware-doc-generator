#!/usr/bin/env python3
"""
Streamlit Web Interface for Context-Aware Documentation Generator
Integrates with existing src/ components and includes ngrok tunneling
"""

import streamlit as st
import sys
import os
import subprocess
import tempfile
from pathlib import Path

# Add src to path
current_dir = Path(__file__).parent
sys.path.insert(0, str(current_dir))
sys.path.insert(0, str(current_dir / 'src'))

def install_dependencies():
    """Install required dependencies"""
    try:
        import streamlit
        import pyngrok
    except ImportError:
        st.error("Installing dependencies...")
        subprocess.check_call([sys.executable, "-m", "pip", "install", "streamlit", "pyngrok"])
        st.rerun()

def setup_ngrok():
    """Set up ngrok tunnel"""
    try:
        from pyngrok import ngrok
        
        # Set auth token
        auth_token = "33dHcz0qHINoRMVnD8COCZ2Vnfp_4dkFqzWa3KeWrLCSKmARW"
        ngrok.set_auth_token(auth_token)
        
        # Create tunnel
        tunnel = ngrok.connect(8501)
        return tunnel.public_url
    except Exception as e:
        st.error(f"ngrok setup failed: {e}")
        return None

def load_ai_components():
    """Load AI components with fallback"""
    try:
        from src.core.context_aware_generator import ContextAwareGenerator
        from src.core.rag_pipeline import RAGPipeline
        
        # Set environment variables
        os.environ['DISABLE_QUANTIZATION'] = '1'
        os.environ['USE_CPU_ONLY'] = '1'
        
        rag_pipeline = RAGPipeline()
        generator = ContextAwareGenerator(rag_pipeline)
        return generator, True
    except Exception as e:
        st.warning(f"AI components not available: {e}")
        return None, False

def generate_with_fallback(code, context):
    """Generate documentation with multiple fallback methods"""
    
    # Method 1: Try direct AI
    generator, ai_available = load_ai_components()
    if ai_available and generator:
        try:
            result = generator.generate_documentation(code, context)
            return result, "✅ Full AI System"
        except Exception as e:
            st.warning(f"Direct AI failed: {e}")
    
    # Method 2: Try CLI interface
    try:
        with tempfile.NamedTemporaryFile(mode='w', suffix='.py', delete=False) as f:
            f.write(code)
            temp_file = f.name
        
        result = subprocess.run([
            sys.executable, 'main.py',
            '--file', temp_file,
            '--context', context or "Code documentation request",
            '--output-format', 'markdown'
        ], capture_output=True, text=True, timeout=30, cwd=str(current_dir))
        
        os.unlink(temp_file)
        
        if result.returncode == 0 and result.stdout.strip():
            return result.stdout, "✅ CLI Interface"
            
    except Exception as e:
        st.warning(f"CLI method failed: {e}")
    
    # Method 3: Basic analysis fallback
    lines = code.strip().split('\n')
    functions = [line.strip() for line in lines if 'def ' in line]
    classes = [line.strip() for line in lines if 'class ' in line]
    imports = [line.strip() for line in lines if line.strip().startswith(('import ', 'from '))]
    
    doc = f"""
# 📚 Code Documentation

## 🔍 Basic Analysis
- **Lines of code:** {len(lines)}
- **Functions:** {len(functions)}
- **Classes:** {len(classes)}
- **Imports:** {len(imports)}

## 📝 Code Structure

```python
{code}
```

## 💡 Provided Context
{context or 'No additional context provided'}

## 🚀 Detected Components

### Functions
{chr(10).join(f"- `{func.split('(')[0].replace('def ', '')}`" for func in functions) if functions else "- No functions detected"}

### Classes
{chr(10).join(f"- `{cls.split('(')[0].replace('class ', '').replace(':', '')}`" for cls in classes) if classes else "- No classes detected"}

### Imports
{chr(10).join(f"- `{imp}`" for imp in imports[:5]) if imports else "- No imports detected"}

## 📋 Recommendations
- Consider adding docstrings to functions and classes
- Implement error handling where appropriate
- Add type hints for better code clarity
- Consider unit tests for critical functions

---
*Generated by Context-Aware Documentation Generator (Fallback Analysis)*
    """
    
    return doc, "✅ Basic Analysis"

def main():
    """Main Streamlit app"""
    
    # Page config
    st.set_page_config(
        page_title="Context-Aware Documentation Generator",
        page_icon="🤖",
        layout="wide",
        initial_sidebar_state="expanded"
    )
    
    # Custom CSS
    st.markdown("""
    <style>
    .main-header {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 2rem;
        border-radius: 10px;
        color: white;
        text-align: center;
        margin-bottom: 2rem;
    }
    .feature-box {
        background: #f8f9fa;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #007bff;
        margin: 1rem 0;
    }
    .success-box {
        background: #d4edda;
        padding: 1rem;
        border-radius: 8px;
        border-left: 4px solid #28a745;
        margin: 1rem 0;
    }
    </style>
    """, unsafe_allow_html=True)
    
    # Header
    st.markdown("""
    <div class="main-header">
        <h1>🤖 Context-Aware Documentation Generator</h1>
        <p>AI-Powered Code Documentation with RAG Pipeline</p>
        <p><strong>🔐 Password:</strong> nOtE7thIs | <strong>🌐 Colab + ngrok Ready</strong></p>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("🛠️ System Info")
        
        # ngrok setup
        if st.button("🌐 Setup ngrok Tunnel", help="Create public URL for Colab access"):
            with st.spinner("Setting up ngrok..."):
                public_url = setup_ngrok()
                if public_url:
                    st.success(f"🎉 Public URL: {public_url}")
                    st.markdown(f"**Share this URL:** `{public_url}`")
        
        st.markdown("---")
        
        # System status
        st.subheader("📊 Status")
        generator, ai_available = load_ai_components()
        
        if ai_available:
            st.markdown('<div class="success-box">✅ Full AI System Available</div>', unsafe_allow_html=True)
        else:
            st.warning("⚠️ AI Components in Demo Mode")
        
        st.info("🔄 Multiple fallback methods ensure documentation generation")
        
        st.markdown("---")
        
        # Quick actions
        st.subheader("⚡ Quick Actions")
        if st.button("🧪 Run System Test"):
            test_code = '''def fibonacci(n):
    """Calculate fibonacci sequence"""
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)'''
            
            result, method = generate_with_fallback(test_code, "Mathematical function test")
            st.success(f"Test completed: {method}")
            st.code(result, language="markdown")
    
    # Main interface
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("📝 Code Documentation")
        
        # Code input
        code_input = st.text_area(
            "Enter your code:",
            height=300,
            placeholder="""def fibonacci(n):
    '''Calculate fibonacci number recursively'''
    if n <= 1:
        return n
    return fibonacci(n-1) + fibonacci(n-2)

class DataProcessor:
    def __init__(self):
        self.data = []
    
    def process(self, item):
        return item.upper()""",
            help="Paste your Python, JavaScript, or other code here"
        )
        
        # Context input
        context_input = st.text_area(
            "Additional Context (optional):",
            height=100,
            placeholder="Mathematical algorithm for academic presentation\nFocus on complexity analysis and optimization\nInclude usage examples",
            help="Provide context about the code's purpose, requirements, or specific documentation needs"
        )
        
        # Generate button
        if st.button("🚀 Generate Documentation", type="primary", use_container_width=True):
            if code_input.strip():
                with st.spinner("🤖 Generating AI-powered documentation..."):
                    result, method = generate_with_fallback(code_input, context_input)
                    
                    st.success(f"Documentation generated using: {method}")
                    st.markdown("---")
                    
                    # Display result
                    st.markdown("## 📄 Generated Documentation")
                    st.markdown(result)
                    
                    # Download option
                    st.download_button(
                        label="📥 Download Documentation",
                        data=result,
                        file_name="documentation.md",
                        mime="text/markdown"
                    )
            else:
                st.error("Please enter some code to document!")
    
    with col2:
        st.header("🎯 Features")
        
        st.markdown("""
        <div class="feature-box">
            <h4>🧠 Context-Aware AI</h4>
            <p>Advanced understanding of code relationships and patterns</p>
        </div>
        
        <div class="feature-box">
            <h4>⚡ RAG Pipeline</h4>
            <p>Retrieval-augmented generation for accurate documentation</p>
        </div>
        
        <div class="feature-box">
            <h4>🔄 Multi-Fallback</h4>
            <p>Multiple generation methods ensure reliable output</p>
        </div>
        
        <div class="feature-box">
            <h4>🌐 Colab Ready</h4>
            <p>Optimized for Google Colab with ngrok tunneling</p>
        </div>
        """, unsafe_allow_html=True)
        
        st.markdown("---")
        
        st.header("🔧 Alternative Access")
        st.code("python terminal_demo.py", language="bash")
        st.code("python enhanced_test.py", language="bash") 
        st.code("python main.py --file code.py", language="bash")

if __name__ == "__main__":
    main()